// Code generated by protoc-gen-gogo.
// source: srctree.proto
// DO NOT EDIT!

/*
Package tests is a generated protocol buffer package.

It is generated from these files:
	srctree.proto

It has these top-level messages:
	SrcTree
*/
package tests

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SrcTree struct {
	PackageName      *string    `protobuf:"bytes,1,opt,name=PackageName" json:"PackageName,omitempty"`
	Imports          []*SrcTree `protobuf:"bytes,2,rep,name=Imports" json:"Imports,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *SrcTree) Reset()                    { *m = SrcTree{} }
func (m *SrcTree) String() string            { return proto.CompactTextString(m) }
func (*SrcTree) ProtoMessage()               {}
func (*SrcTree) Descriptor() ([]byte, []int) { return fileDescriptorSrctree, []int{0} }

func (m *SrcTree) GetPackageName() string {
	if m != nil && m.PackageName != nil {
		return *m.PackageName
	}
	return ""
}

func (m *SrcTree) GetImports() []*SrcTree {
	if m != nil {
		return m.Imports
	}
	return nil
}

func init() {
	proto.RegisterType((*SrcTree)(nil), "tests.SrcTree")
}
func (this *SrcTree) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return SrctreeDescription()
}
func SrctreeDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3412 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5a, 0x4b, 0x6c, 0x1b, 0xd7,
		0xd5, 0x0e, 0x5f, 0x12, 0x79, 0x48, 0x51, 0xa3, 0x2b, 0x45, 0xa6, 0x95, 0xc4, 0x96, 0x15, 0xe7,
		0x8f, 0x92, 0xfc, 0x91, 0x03, 0xc7, 0x76, 0x6c, 0xfa, 0x4f, 0x0c, 0x4a, 0xa2, 0x15, 0x19, 0x7a,
		0xf0, 0x1f, 0x4a, 0x89, 0x93, 0x2c, 0x06, 0x57, 0xc3, 0x4b, 0x6a, 0xec, 0xe1, 0x0c, 0xff, 0x99,
		0xa1, 0x6d, 0x79, 0xe5, 0x20, 0xff, 0xff, 0x17, 0x41, 0xd0, 0x77, 0x81, 0xe6, 0x9d, 0x34, 0x40,
		0x9b, 0x36, 0x4d, 0x1f, 0xe9, 0x6b, 0xd1, 0x55, 0x37, 0x69, 0x77, 0x05, 0xb2, 0xef, 0x26, 0x40,
		0x80, 0xbe, 0xd2, 0x36, 0x6d, 0x0d, 0xb4, 0x80, 0x37, 0xc5, 0x7d, 0x0d, 0x67, 0x48, 0xca, 0x43,
		0x05, 0x48, 0xd2, 0x95, 0x78, 0xcf, 0x3d, 0xdf, 0x37, 0xf7, 0x9e, 0x73, 0xee, 0x39, 0x67, 0xee,
		0x08, 0x9e, 0x3e, 0x06, 0xd3, 0x0d, 0xdb, 0x6e, 0x98, 0xe4, 0x48, 0xcb, 0xb1, 0x3d, 0x7b, 0xab,
		0x5d, 0x3f, 0x52, 0x23, 0xae, 0xee, 0x18, 0x2d, 0xcf, 0x76, 0xe6, 0x98, 0x0c, 0x8d, 0x72, 0x8d,
		0x39, 0xa9, 0x31, 0xb3, 0x0a, 0x63, 0x67, 0x0d, 0x93, 0x2c, 0xfa, 0x8a, 0x55, 0xe2, 0xa1, 0x93,
		0x90, 0xac, 0x1b, 0x26, 0x29, 0xc4, 0xa6, 0x13, 0xb3, 0xd9, 0xa3, 0x87, 0xe7, 0xba, 0x40, 0x73,
		0x61, 0x44, 0x85, 0x8a, 0x55, 0x86, 0x98, 0xf9, 0x20, 0x09, 0xe3, 0x7d, 0x66, 0x11, 0x82, 0xa4,
		0x85, 0x9b, 0x94, 0x31, 0x36, 0x9b, 0x51, 0xd9, 0x6f, 0x54, 0x80, 0xe1, 0x16, 0xd6, 0x2f, 0xe2,
		0x06, 0x29, 0xc4, 0x99, 0x58, 0x0e, 0xd1, 0x01, 0x80, 0x1a, 0x69, 0x11, 0xab, 0x46, 0x2c, 0x7d,
		0xa7, 0x90, 0x98, 0x4e, 0xcc, 0x66, 0xd4, 0x80, 0x04, 0xdd, 0x07, 0x63, 0xad, 0xf6, 0x96, 0x69,
		0xe8, 0x5a, 0x40, 0x0d, 0xa6, 0x13, 0xb3, 0x29, 0x55, 0xe1, 0x13, 0x8b, 0x1d, 0xe5, 0xbb, 0x61,
		0xf4, 0x32, 0xc1, 0x17, 0x83, 0xaa, 0x59, 0xa6, 0x9a, 0xa7, 0xe2, 0x80, 0xe2, 0x02, 0xe4, 0x9a,
		0xc4, 0x75, 0x71, 0x83, 0x68, 0xde, 0x4e, 0x8b, 0x14, 0x92, 0x6c, 0xf7, 0xd3, 0x3d, 0xbb, 0xef,
		0xde, 0x79, 0x56, 0xa0, 0x36, 0x76, 0x5a, 0x04, 0x95, 0x20, 0x43, 0xac, 0x76, 0x93, 0x33, 0xa4,
		0x76, 0xb1, 0x5f, 0xd9, 0x6a, 0x37, 0xbb, 0x59, 0xd2, 0x14, 0x26, 0x28, 0x86, 0x5d, 0xe2, 0x5c,
		0x32, 0x74, 0x52, 0x18, 0x62, 0x04, 0x77, 0xf7, 0x10, 0x54, 0xf9, 0x7c, 0x37, 0x87, 0xc4, 0xa1,
		0x05, 0xc8, 0x90, 0x2b, 0x1e, 0xb1, 0x5c, 0xc3, 0xb6, 0x0a, 0xc3, 0x8c, 0xe4, 0xae, 0x3e, 0x5e,
		0x24, 0x66, 0xad, 0x9b, 0xa2, 0x83, 0x43, 0x27, 0x60, 0xd8, 0x6e, 0x79, 0x86, 0x6d, 0xb9, 0x85,
		0xf4, 0x74, 0x6c, 0x36, 0x7b, 0xf4, 0xf6, 0xbe, 0x81, 0xb0, 0xce, 0x75, 0x54, 0xa9, 0x8c, 0x96,
		0x41, 0x71, 0xed, 0xb6, 0xa3, 0x13, 0x4d, 0xb7, 0x6b, 0x44, 0x33, 0xac, 0xba, 0x5d, 0xc8, 0x30,
		0x82, 0x83, 0xbd, 0x1b, 0x61, 0x8a, 0x0b, 0x76, 0x8d, 0x2c, 0x5b, 0x75, 0x5b, 0xcd, 0xbb, 0xa1,
		0x31, 0x9a, 0x84, 0x21, 0x77, 0xc7, 0xf2, 0xf0, 0x95, 0x42, 0x8e, 0x45, 0x88, 0x18, 0xcd, 0xfc,
		0x23, 0x05, 0xa3, 0x83, 0x84, 0xd8, 0x69, 0x48, 0xd5, 0xe9, 0x2e, 0x0b, 0xf1, 0xbd, 0xd8, 0x80,
		0x63, 0xc2, 0x46, 0x1c, 0xfa, 0x98, 0x46, 0x2c, 0x41, 0xd6, 0x22, 0xae, 0x47, 0x6a, 0x3c, 0x22,
		0x12, 0x03, 0xc6, 0x14, 0x70, 0x50, 0x6f, 0x48, 0x25, 0x3f, 0x56, 0x48, 0x9d, 0x87, 0x51, 0x7f,
		0x49, 0x9a, 0x83, 0xad, 0x86, 0x8c, 0xcd, 0x23, 0x51, 0x2b, 0x99, 0x2b, 0x4b, 0x9c, 0x4a, 0x61,
		0x6a, 0x9e, 0x84, 0xc6, 0x68, 0x11, 0xc0, 0xb6, 0x88, 0x5d, 0xd7, 0x6a, 0x44, 0x37, 0x0b, 0xe9,
		0x5d, 0xac, 0xb4, 0x4e, 0x55, 0x7a, 0xac, 0x64, 0x73, 0xa9, 0x6e, 0xa2, 0x53, 0x9d, 0x50, 0x1b,
		0xde, 0x25, 0x52, 0x56, 0xf9, 0x21, 0xeb, 0x89, 0xb6, 0x4d, 0xc8, 0x3b, 0x84, 0xc6, 0x3d, 0xa9,
		0x89, 0x9d, 0x65, 0xd8, 0x22, 0xe6, 0x22, 0x77, 0xa6, 0x0a, 0x18, 0xdf, 0xd8, 0x88, 0x13, 0x1c,
		0xa2, 0x3b, 0xc1, 0x17, 0x68, 0x2c, 0xac, 0x80, 0x65, 0xa1, 0x9c, 0x14, 0xae, 0xe1, 0x26, 0x99,
		0x3a, 0x09, 0xf9, 0xb0, 0x79, 0xd0, 0x04, 0xa4, 0x5c, 0x0f, 0x3b, 0x1e, 0x8b, 0xc2, 0x94, 0xca,
		0x07, 0x48, 0x81, 0x04, 0xb1, 0x6a, 0x2c, 0xcb, 0xa5, 0x54, 0xfa, 0x73, 0xea, 0x21, 0x18, 0x09,
		0x3d, 0x7e, 0x50, 0xe0, 0xcc, 0xf3, 0x43, 0x30, 0xd1, 0x2f, 0xe6, 0xfa, 0x86, 0xff, 0x24, 0x0c,
		0x59, 0xed, 0xe6, 0x16, 0x71, 0x0a, 0x09, 0xc6, 0x20, 0x46, 0xa8, 0x04, 0x29, 0x13, 0x6f, 0x11,
		0xb3, 0x90, 0x9c, 0x8e, 0xcd, 0xe6, 0x8f, 0xde, 0x37, 0x50, 0x54, 0xcf, 0xad, 0x50, 0x88, 0xca,
		0x91, 0xe8, 0x11, 0x48, 0x8a, 0x14, 0x47, 0x19, 0xee, 0x1d, 0x8c, 0x81, 0xc6, 0xa2, 0xca, 0x70,
		0xe8, 0x36, 0xc8, 0xd0, 0xbf, 0xdc, 0xb6, 0x43, 0x6c, 0xcd, 0x69, 0x2a, 0xa0, 0x76, 0x45, 0x53,
		0x90, 0x66, 0x61, 0x56, 0x23, 0xb2, 0x34, 0xf8, 0x63, 0xea, 0x98, 0x1a, 0xa9, 0xe3, 0xb6, 0xe9,
		0x69, 0x97, 0xb0, 0xd9, 0x26, 0x2c, 0x60, 0x32, 0x6a, 0x4e, 0x08, 0x1f, 0xa3, 0x32, 0x74, 0x10,
		0xb2, 0x3c, 0x2a, 0x0d, 0xab, 0x46, 0xae, 0xb0, 0xec, 0x93, 0x52, 0x79, 0xa0, 0x2e, 0x53, 0x09,
		0x7d, 0xfc, 0x05, 0xd7, 0xb6, 0xa4, 0x6b, 0xd9, 0x23, 0xa8, 0x80, 0x3d, 0xfe, 0xa1, 0xee, 0xc4,
		0x77, 0x47, 0xff, 0xed, 0x75, 0xc7, 0xe2, 0xcc, 0xcf, 0xe2, 0x90, 0x64, 0xe7, 0x6d, 0x14, 0xb2,
		0x1b, 0x4f, 0x54, 0xca, 0xda, 0xe2, 0xfa, 0xe6, 0xfc, 0x4a, 0x59, 0x89, 0xa1, 0x3c, 0x00, 0x13,
		0x9c, 0x5d, 0x59, 0x2f, 0x6d, 0x28, 0x71, 0x7f, 0xbc, 0xbc, 0xb6, 0x71, 0xe2, 0x98, 0x92, 0xf0,
		0x01, 0x9b, 0x5c, 0x90, 0x0c, 0x2a, 0x3c, 0x78, 0x54, 0x49, 0x21, 0x05, 0x72, 0x9c, 0x60, 0xf9,
		0x7c, 0x79, 0xf1, 0xc4, 0x31, 0x65, 0x28, 0x2c, 0x79, 0xf0, 0xa8, 0x32, 0x8c, 0x46, 0x20, 0xc3,
		0x24, 0xf3, 0xeb, 0xeb, 0x2b, 0x4a, 0xda, 0xe7, 0xac, 0x6e, 0xa8, 0xcb, 0x6b, 0x4b, 0x4a, 0xc6,
		0xe7, 0x5c, 0x52, 0xd7, 0x37, 0x2b, 0x0a, 0xf8, 0x0c, 0xab, 0xe5, 0x6a, 0xb5, 0xb4, 0x54, 0x56,
		0xb2, 0xbe, 0xc6, 0xfc, 0x13, 0x1b, 0xe5, 0xaa, 0x92, 0x0b, 0x2d, 0xeb, 0xc1, 0xa3, 0xca, 0x88,
		0xff, 0x88, 0xf2, 0xda, 0xe6, 0xaa, 0x92, 0x47, 0x63, 0x30, 0xc2, 0x1f, 0x21, 0x17, 0x31, 0xda,
		0x25, 0x3a, 0x71, 0x4c, 0x51, 0x3a, 0x0b, 0xe1, 0x2c, 0x63, 0x21, 0xc1, 0x89, 0x63, 0x0a, 0x9a,
		0x59, 0x80, 0x14, 0x8b, 0x2e, 0x84, 0x20, 0xbf, 0x52, 0x9a, 0x2f, 0xaf, 0x68, 0xeb, 0x95, 0x8d,
		0xe5, 0xf5, 0xb5, 0xd2, 0x8a, 0x12, 0xeb, 0xc8, 0xd4, 0xf2, 0x7f, 0x6f, 0x2e, 0xab, 0xe5, 0x45,
		0x25, 0x1e, 0x94, 0x55, 0xca, 0xa5, 0x8d, 0xf2, 0xa2, 0x92, 0x98, 0xd1, 0x61, 0xa2, 0x5f, 0x9e,
		0xe9, 0x7b, 0x32, 0x02, 0x2e, 0x8e, 0xef, 0xe2, 0x62, 0xc6, 0xd5, 0xe3, 0xe2, 0x37, 0x62, 0x30,
		0xde, 0x27, 0xd7, 0xf6, 0x7d, 0xc8, 0x19, 0x48, 0xf1, 0x10, 0xe5, 0xd5, 0xe7, 0x9e, 0xbe, 0x49,
		0x9b, 0x05, 0x6c, 0x4f, 0x05, 0x62, 0xb8, 0x60, 0x05, 0x4e, 0xec, 0x52, 0x81, 0x29, 0x45, 0xcf,
		0x22, 0x9f, 0x89, 0x41, 0x61, 0x37, 0xee, 0x88, 0x44, 0x11, 0x0f, 0x25, 0x8a, 0xd3, 0xdd, 0x0b,
		0x38, 0xb4, 0xfb, 0x1e, 0x7a, 0x56, 0xf1, 0x66, 0x0c, 0x26, 0xfb, 0x37, 0x2a, 0x7d, 0xd7, 0xf0,
		0x08, 0x0c, 0x35, 0x89, 0xb7, 0x6d, 0xcb, 0x62, 0xfd, 0x1f, 0x7d, 0x4a, 0x00, 0x9d, 0xee, 0xb6,
		0x95, 0x40, 0x05, 0x6b, 0x48, 0x62, 0xb7, 0x6e, 0x83, 0xaf, 0xa6, 0x67, 0xa5, 0xcf, 0xc6, 0xe1,
		0xd6, 0xbe, 0xe4, 0x7d, 0x17, 0x7a, 0x07, 0x80, 0x61, 0xb5, 0xda, 0x1e, 0x2f, 0xc8, 0x3c, 0x3f,
		0x65, 0x98, 0x84, 0x9d, 0x7d, 0x9a, 0x7b, 0xda, 0x9e, 0x3f, 0x9f, 0x60, 0xf3, 0xc0, 0x45, 0x4c,
		0xe1, 0x64, 0x67, 0xa1, 0x49, 0xb6, 0xd0, 0x03, 0xbb, 0xec, 0xb4, 0xa7, 0xd6, 0x3d, 0x00, 0x8a,
		0x6e, 0x1a, 0xc4, 0xf2, 0x34, 0xd7, 0x73, 0x08, 0x6e, 0x1a, 0x56, 0x83, 0x25, 0xe0, 0x74, 0x31,
		0x55, 0xc7, 0xa6, 0x4b, 0xd4, 0x51, 0x3e, 0x5d, 0x95, 0xb3, 0x14, 0xc1, 0xaa, 0x8c, 0x13, 0x40,
		0x0c, 0x85, 0x10, 0x7c, 0xda, 0x47, 0xcc, 0x3c, 0x37, 0x0c, 0xd9, 0x40, 0x5b, 0x87, 0x0e, 0x41,
		0xee, 0x02, 0xbe, 0x84, 0x35, 0xd9, 0xaa, 0x73, 0x4b, 0x64, 0xa9, 0xac, 0x22, 0xda, 0xf5, 0x07,
		0x60, 0x82, 0xa9, 0xd8, 0x6d, 0x8f, 0x38, 0x9a, 0x6e, 0x62, 0xd7, 0x65, 0x46, 0x4b, 0x33, 0x55,
		0x44, 0xe7, 0xd6, 0xe9, 0xd4, 0x82, 0x9c, 0x41, 0xc7, 0x61, 0x9c, 0x21, 0x9a, 0x6d, 0xd3, 0x33,
		0x5a, 0x26, 0xd1, 0xe8, 0xcb, 0x83, 0xcb, 0x12, 0xb1, 0xbf, 0xb2, 0x31, 0xaa, 0xb1, 0x2a, 0x14,
		0xe8, 0x8a, 0x5c, 0xb4, 0x04, 0x77, 0x30, 0x58, 0x83, 0x58, 0xc4, 0xc1, 0x1e, 0xd1, 0xc8, 0xff,
		0xb4, 0xb1, 0xe9, 0x6a, 0xd8, 0xaa, 0x69, 0xdb, 0xd8, 0xdd, 0x2e, 0x4c, 0x04, 0x09, 0xf6, 0x53,
		0xdd, 0x25, 0xa1, 0x5a, 0x66, 0x9a, 0x25, 0xab, 0xf6, 0x28, 0x76, 0xb7, 0x51, 0x11, 0x26, 0x19,
		0x91, 0xeb, 0x39, 0x86, 0xd5, 0xd0, 0xf4, 0x6d, 0xa2, 0x5f, 0xd4, 0xda, 0x5e, 0xfd, 0x64, 0xe1,
		0xb6, 0x20, 0x03, 0x5b, 0x64, 0x95, 0xe9, 0x2c, 0x50, 0x95, 0x4d, 0xaf, 0x7e, 0x12, 0x55, 0x21,
		0x47, 0xfd, 0xd1, 0x34, 0xae, 0x12, 0xad, 0x6e, 0x3b, 0xac, 0xb8, 0xe4, 0xfb, 0x1c, 0xee, 0x80,
		0x11, 0xe7, 0xd6, 0x05, 0x60, 0xd5, 0xae, 0x91, 0x62, 0xaa, 0x5a, 0x29, 0x97, 0x17, 0xd5, 0xac,
		0x64, 0x39, 0x6b, 0x3b, 0x34, 0xa6, 0x1a, 0xb6, 0x6f, 0xe3, 0x2c, 0x8f, 0xa9, 0x86, 0x2d, 0x2d,
		0x7c, 0x1c, 0xc6, 0x75, 0x9d, 0x6f, 0xdb, 0xd0, 0x35, 0xd1, 0xe5, 0xbb, 0x05, 0x25, 0x64, 0x2f,
		0x5d, 0x5f, 0xe2, 0x0a, 0x22, 0xcc, 0x5d, 0x74, 0x0a, 0x6e, 0xed, 0xd8, 0x2b, 0x08, 0x1c, 0xeb,
		0xd9, 0x65, 0x37, 0xf4, 0x38, 0x8c, 0xb7, 0x76, 0x7a, 0x81, 0x28, 0xf4, 0xc4, 0xd6, 0x4e, 0x37,
		0xec, 0x2e, 0xf6, 0xe6, 0xe6, 0x10, 0x1d, 0x7b, 0xa4, 0x56, 0xd8, 0x17, 0xd4, 0x0e, 0x4c, 0xa0,
		0x23, 0xa0, 0xe8, 0xba, 0x46, 0x2c, 0xbc, 0x65, 0x12, 0x0d, 0x3b, 0xc4, 0xc2, 0x6e, 0xe1, 0x60,
		0x50, 0x39, 0xaf, 0xeb, 0x65, 0x36, 0x5b, 0x62, 0x93, 0xe8, 0x5e, 0x18, 0xb3, 0xb7, 0x2e, 0xe8,
		0x3c, 0xb8, 0xb4, 0x96, 0x43, 0xea, 0xc6, 0x95, 0xc2, 0x61, 0x66, 0xa6, 0x51, 0x3a, 0xc1, 0x42,
		0xab, 0xc2, 0xc4, 0xe8, 0x1e, 0x50, 0x74, 0x77, 0x1b, 0x3b, 0x2d, 0x56, 0xdd, 0xdd, 0x16, 0xd6,
		0x49, 0xe1, 0x2e, 0xae, 0xca, 0xe5, 0x6b, 0x52, 0x8c, 0xce, 0xc3, 0x44, 0xdb, 0x32, 0x2c, 0x8f,
		0x38, 0x2d, 0x87, 0xd0, 0x26, 0x9d, 0x9f, 0xb4, 0xc2, 0x6f, 0x87, 0x77, 0x69, 0xb3, 0x37, 0x83,
		0xda, 0xdc, 0xbb, 0xea, 0x78, 0xbb, 0x57, 0x38, 0x53, 0x84, 0x5c, 0xd0, 0xe9, 0x28, 0x03, 0xdc,
		0xed, 0x4a, 0x8c, 0xd6, 0xd0, 0x85, 0xf5, 0x45, 0x5a, 0xfd, 0x9e, 0x2c, 0x2b, 0x71, 0x5a, 0x85,
		0x57, 0x96, 0x37, 0xca, 0x9a, 0xba, 0xb9, 0xb6, 0xb1, 0xbc, 0x5a, 0x56, 0x12, 0xf7, 0x66, 0xd2,
		0xbf, 0x1b, 0x56, 0xae, 0x5d, 0xbb, 0x76, 0x2d, 0x3e, 0xf3, 0x6e, 0x1c, 0xf2, 0xe1, 0xce, 0x17,
		0xfd, 0x17, 0xec, 0x93, 0xaf, 0xa9, 0x2e, 0xf1, 0xb4, 0xcb, 0x86, 0xc3, 0xe2, 0xb0, 0x89, 0x79,
		0xef, 0xe8, 0x9b, 0x70, 0x42, 0x68, 0x55, 0x89, 0xf7, 0xb8, 0xe1, 0xd0, 0x28, 0x6b, 0x62, 0x0f,
		0xad, 0xc0, 0x41, 0xcb, 0xd6, 0x5c, 0x0f, 0x5b, 0x35, 0xec, 0xd4, 0xb4, 0xce, 0x05, 0x81, 0x86,
		0x75, 0x9d, 0xb8, 0xae, 0xcd, 0x4b, 0x80, 0xcf, 0x72, 0xbb, 0x65, 0x57, 0x85, 0x72, 0x27, 0x37,
		0x96, 0x84, 0x6a, 0x97, 0xbb, 0x13, 0xbb, 0xb9, 0xfb, 0x36, 0xc8, 0x34, 0x71, 0x4b, 0x23, 0x96,
		0xe7, 0xec, 0xb0, 0x7e, 0x2d, 0xad, 0xa6, 0x9b, 0xb8, 0x55, 0xa6, 0xe3, 0x4f, 0xce, 0x07, 0x41,
		0x3b, 0xfe, 0x26, 0x01, 0xb9, 0x60, 0xcf, 0x46, 0x5b, 0x60, 0x9d, 0xe5, 0xe7, 0x18, 0x3b, 0xbe,
		0x77, 0xde, 0xb4, 0xc3, 0x9b, 0x5b, 0xa0, 0x89, 0xbb, 0x38, 0xc4, 0x3b, 0x29, 0x95, 0x23, 0x69,
		0xd1, 0xa4, 0x07, 0x96, 0xf0, 0xfe, 0x3c, 0xad, 0x8a, 0x11, 0x5a, 0x82, 0xa1, 0x0b, 0x2e, 0xe3,
		0x1e, 0x62, 0xdc, 0x87, 0x6f, 0xce, 0x7d, 0xae, 0xca, 0xc8, 0x33, 0xe7, 0xaa, 0xda, 0xda, 0xba,
		0xba, 0x5a, 0x5a, 0x51, 0x05, 0x1c, 0xed, 0x87, 0xa4, 0x89, 0xaf, 0xee, 0x84, 0x53, 0x3c, 0x13,
		0x0d, 0x6a, 0xf8, 0xfd, 0x90, 0xbc, 0x4c, 0xf0, 0xc5, 0x70, 0x62, 0x65, 0xa2, 0x4f, 0x30, 0xf4,
		0x8f, 0x40, 0x8a, 0xd9, 0x0b, 0x01, 0x08, 0x8b, 0x29, 0xb7, 0xa0, 0x34, 0x24, 0x17, 0xd6, 0x55,
		0x1a, 0xfe, 0x0a, 0xe4, 0xb8, 0x54, 0xab, 0x2c, 0x97, 0x17, 0xca, 0x4a, 0x7c, 0xe6, 0x38, 0x0c,
		0x71, 0x23, 0xd0, 0xa3, 0xe1, 0x9b, 0x41, 0xb9, 0x45, 0x0c, 0x05, 0x47, 0x4c, 0xce, 0x6e, 0xae,
		0xce, 0x97, 0x55, 0x25, 0x1e, 0x74, 0xaf, 0x0b, 0xb9, 0x60, 0xbb, 0xf6, 0xe9, 0xc4, 0xd4, 0xcf,
		0x63, 0x90, 0x0d, 0xb4, 0x5f, 0xb4, 0xf0, 0x63, 0xd3, 0xb4, 0x2f, 0x6b, 0xd8, 0x34, 0xb0, 0x2b,
		0x82, 0x02, 0x98, 0xa8, 0x44, 0x25, 0x83, 0x3a, 0xed, 0x53, 0x59, 0xfc, 0xab, 0x31, 0x50, 0xba,
		0x5b, 0xb7, 0xae, 0x05, 0xc6, 0x3e, 0xd3, 0x05, 0xbe, 0x1c, 0x83, 0x7c, 0xb8, 0x5f, 0xeb, 0x5a,
		0xde, 0xa1, 0xcf, 0x74, 0x79, 0x2f, 0xc5, 0x60, 0x24, 0xd4, 0xa5, 0xfd, 0x5b, 0xad, 0xee, 0xc5,
		0x04, 0x8c, 0xf7, 0xc1, 0xa1, 0x92, 0x68, 0x67, 0x79, 0x87, 0x7d, 0xff, 0x20, 0xcf, 0x9a, 0xa3,
		0xd5, 0xb2, 0x82, 0x1d, 0x4f, 0x74, 0xbf, 0xf7, 0x80, 0x62, 0xd4, 0x88, 0xe5, 0x19, 0x75, 0x83,
		0x38, 0xe2, 0x15, 0x9c, 0xf7, 0xb8, 0xa3, 0x1d, 0x39, 0x7f, 0x0b, 0xff, 0x4f, 0x40, 0x2d, 0xdb,
		0x35, 0x3c, 0xe3, 0x12, 0xd1, 0x0c, 0x4b, 0xbe, 0xaf, 0xd3, 0x9e, 0x37, 0xa9, 0x2a, 0x72, 0x66,
		0xd9, 0xf2, 0x7c, 0x6d, 0x8b, 0x34, 0x70, 0x97, 0x36, 0xcd, 0x7d, 0x09, 0x55, 0x91, 0x33, 0xbe,
		0xf6, 0x21, 0xc8, 0xd5, 0xec, 0x36, 0x6d, 0x1f, 0xb8, 0x1e, 0x4d, 0xb5, 0x31, 0x35, 0xcb, 0x65,
		0xbe, 0x8a, 0xe8, 0xef, 0x3a, 0x17, 0x05, 0x39, 0x35, 0xcb, 0x65, 0x5c, 0xe5, 0x6e, 0x18, 0xc5,
		0x8d, 0x86, 0x43, 0xc9, 0x25, 0x11, 0x6f, 0x5a, 0xf3, 0xbe, 0x98, 0x29, 0x4e, 0x9d, 0x83, 0xb4,
		0xb4, 0x03, 0xad, 0x66, 0xd4, 0x12, 0x5a, 0x8b, 0x5f, 0xd7, 0xc4, 0x67, 0x33, 0x6a, 0xda, 0x92,
		0x93, 0x87, 0x20, 0x67, 0xb8, 0x5a, 0xe7, 0xde, 0x30, 0x3e, 0x1d, 0x9f, 0x4d, 0xab, 0x59, 0xc3,
		0xf5, 0x2f, 0x8a, 0x66, 0xde, 0x8c, 0x43, 0x3e, 0x7c, 0xef, 0x89, 0x16, 0x21, 0x6d, 0xda, 0x3a,
		0x66, 0x81, 0xc0, 0x2f, 0xdd, 0x67, 0x23, 0xae, 0x4a, 0xe7, 0x56, 0x84, 0xbe, 0xea, 0x23, 0xa7,
		0x7e, 0x1d, 0x83, 0xb4, 0x14, 0xa3, 0x49, 0x48, 0xb6, 0xb0, 0xb7, 0xcd, 0xe8, 0x52, 0xf3, 0x71,
		0x25, 0xa6, 0xb2, 0x31, 0x95, 0xbb, 0x2d, 0x6c, 0xb1, 0x10, 0x10, 0x72, 0x3a, 0xa6, 0x7e, 0x35,
		0x09, 0xae, 0xb1, 0x76, 0xd8, 0x6e, 0x36, 0x89, 0xe5, 0xb9, 0xd2, 0xaf, 0x42, 0xbe, 0x20, 0xc4,
		0xe8, 0x3e, 0x18, 0xf3, 0x1c, 0x6c, 0x98, 0x21, 0xdd, 0x24, 0xd3, 0x55, 0xe4, 0x84, 0xaf, 0x5c,
		0x84, 0xfd, 0x92, 0xb7, 0x46, 0x3c, 0xac, 0x6f, 0x93, 0x5a, 0x07, 0x34, 0xc4, 0x2e, 0xd5, 0xf6,
		0x09, 0x85, 0x45, 0x31, 0x2f, 0xb1, 0x33, 0xef, 0xc5, 0x60, 0x4c, 0x36, 0xf0, 0x35, 0xdf, 0x58,
		0xab, 0x00, 0xd8, 0xb2, 0x6c, 0x2f, 0x68, 0xae, 0xde, 0x50, 0xee, 0xc1, 0xcd, 0x95, 0x7c, 0x90,
		0x1a, 0x20, 0x98, 0x6a, 0x02, 0x74, 0x66, 0x76, 0x35, 0xdb, 0x41, 0xc8, 0x8a, 0x4b, 0x6d, 0xf6,
		0x65, 0x84, 0xbf, 0xf5, 0x01, 0x17, 0xd1, 0x4e, 0x1f, 0x4d, 0x40, 0x6a, 0x8b, 0x34, 0x0c, 0x4b,
		0x5c, 0xb5, 0xf1, 0x81, 0xbc, 0xc0, 0x4b, 0xfa, 0x17, 0x78, 0xf3, 0x4f, 0xc1, 0xb8, 0x6e, 0x37,
		0xbb, 0x97, 0x3b, 0xaf, 0x74, 0xbd, 0x79, 0xba, 0x8f, 0xc6, 0x9e, 0x84, 0x4e, 0x77, 0xf6, 0x7a,
		0x2c, 0xf6, 0x46, 0x3c, 0xb1, 0x54, 0x99, 0x7f, 0x2b, 0x3e, 0xb5, 0xc4, 0xa1, 0x15, 0xb9, 0x53,
		0x95, 0xd4, 0x4d, 0xa2, 0xd3, 0xd5, 0xc3, 0x6b, 0x87, 0xe1, 0xfe, 0x86, 0xe1, 0x6d, 0xb7, 0xb7,
		0xe6, 0x74, 0xbb, 0x79, 0xa4, 0x61, 0x37, 0xec, 0xce, 0xc7, 0x20, 0x3a, 0x62, 0x03, 0xf6, 0x4b,
		0x7c, 0x10, 0xca, 0xf8, 0xd2, 0xa9, 0xc8, 0xaf, 0x47, 0xc5, 0x35, 0x18, 0x17, 0xca, 0x1a, 0xbb,
		0x91, 0xe6, 0x7d, 0x38, 0xba, 0xe9, 0xad, 0x44, 0xe1, 0x9d, 0x0f, 0x58, 0xa5, 0x53, 0xc7, 0x04,
		0x94, 0xce, 0xf1, 0x4e, 0xbd, 0xa8, 0xc2, 0xad, 0x21, 0x3e, 0x7e, 0x34, 0x89, 0x13, 0xc1, 0xf8,
		0xae, 0x60, 0x1c, 0x0f, 0x30, 0x56, 0x05, 0xb4, 0xb8, 0x00, 0x23, 0x7b, 0xe1, 0xfa, 0xa5, 0xe0,
		0xca, 0x91, 0x20, 0xc9, 0x12, 0x8c, 0x32, 0x12, 0xbd, 0xed, 0x7a, 0x76, 0x93, 0xe5, 0xbd, 0x9b,
		0xd3, 0xfc, 0xea, 0x03, 0x7e, 0x56, 0xf2, 0x14, 0xb6, 0xe0, 0xa3, 0x8a, 0x8f, 0xc1, 0x04, 0x95,
		0xb0, 0xd4, 0x12, 0x64, 0x8b, 0xbe, 0x47, 0x29, 0xbc, 0xf7, 0x0c, 0x3f, 0x52, 0xe3, 0x3e, 0x41,
		0x80, 0x37, 0xe0, 0x89, 0x06, 0xf1, 0x3c, 0xe2, 0xb8, 0x1a, 0x36, 0x4d, 0x74, 0xd3, 0x2f, 0x34,
		0x85, 0x17, 0x3e, 0x0c, 0x7b, 0x62, 0x89, 0x23, 0x4b, 0xa6, 0x59, 0xdc, 0x84, 0x7d, 0x7d, 0x3c,
		0x3b, 0x00, 0xe7, 0x8b, 0x82, 0x73, 0xa2, 0xc7, 0xbb, 0x94, 0xb6, 0x02, 0x52, 0xee, 0xfb, 0x63,
		0x00, 0xce, 0x97, 0x04, 0x27, 0x12, 0x58, 0xe9, 0x16, 0xca, 0x78, 0x0e, 0xc6, 0x2e, 0x11, 0x67,
		0xcb, 0x76, 0xc5, 0xcb, 0xff, 0x00, 0x74, 0x2f, 0x0b, 0xba, 0x51, 0x01, 0x64, 0x57, 0x01, 0x94,
		0xeb, 0x14, 0xa4, 0xeb, 0x58, 0x27, 0x03, 0x50, 0xbc, 0x22, 0x28, 0x86, 0xa9, 0x3e, 0x85, 0x96,
		0x20, 0xd7, 0xb0, 0x45, 0x75, 0x89, 0x86, 0xbf, 0x2a, 0xe0, 0x59, 0x89, 0x11, 0x14, 0x2d, 0xbb,
		0xd5, 0x36, 0x69, 0xe9, 0x89, 0xa6, 0x78, 0x4d, 0x52, 0x48, 0x8c, 0xa0, 0xd8, 0x83, 0x59, 0x5f,
		0x97, 0x14, 0x6e, 0xc0, 0x9e, 0x67, 0x20, 0x6b, 0x5b, 0xe6, 0x8e, 0x6d, 0x0d, 0xb2, 0x88, 0x6f,
		0x08, 0x06, 0x10, 0x10, 0x4a, 0x70, 0x1a, 0x32, 0x83, 0x3a, 0xe2, 0x9b, 0x02, 0x9e, 0x26, 0xd2,
		0x03, 0x4b, 0x30, 0x2a, 0x93, 0x8c, 0x61, 0x5b, 0x03, 0x50, 0x7c, 0x4b, 0x50, 0xe4, 0x03, 0x30,
		0xb1, 0x0d, 0x8f, 0xb8, 0x5e, 0x83, 0x0c, 0x42, 0xf2, 0xa6, 0xdc, 0x86, 0x80, 0x08, 0x53, 0x6e,
		0x11, 0x4b, 0xdf, 0x1e, 0x8c, 0xe1, 0xdb, 0xd2, 0x94, 0x12, 0x43, 0x29, 0x16, 0x60, 0xa4, 0x89,
		0x1d, 0x77, 0x1b, 0x9b, 0x03, 0xb9, 0xe3, 0x3b, 0x82, 0x23, 0xe7, 0x83, 0x84, 0x45, 0xda, 0xd6,
		0x5e, 0x68, 0xde, 0x92, 0x16, 0x09, 0xc0, 0xc4, 0xd1, 0x73, 0x3d, 0x76, 0xbf, 0xb2, 0x17, 0xb6,
		0xef, 0xca, 0xa3, 0xc7, 0xb1, 0xab, 0x41, 0xc6, 0xd3, 0x90, 0x71, 0x8d, 0xab, 0x03, 0xd1, 0xbc,
		0x2d, 0x3d, 0xcd, 0x00, 0x14, 0xfc, 0x04, 0xec, 0xef, 0x9b, 0xea, 0x07, 0x20, 0xfb, 0x9e, 0x20,
		0x9b, 0xec, 0x93, 0xee, 0x45, 0x4a, 0xd8, 0x2b, 0xe5, 0xf7, 0x65, 0x4a, 0x20, 0x5d, 0x5c, 0x15,
		0xda, 0x9d, 0xbb, 0xb8, 0xbe, 0x37, 0xab, 0xfd, 0x40, 0x5a, 0x8d, 0x63, 0x43, 0x56, 0xdb, 0x80,
		0x49, 0xc1, 0xb8, 0x37, 0xbf, 0xfe, 0x50, 0x26, 0x56, 0x8e, 0xde, 0x0c, 0x7b, 0xf7, 0x29, 0x98,
		0xf2, 0xcd, 0x29, 0x1b, 0x4b, 0x57, 0x6b, 0xe2, 0xd6, 0x00, 0xcc, 0xef, 0x08, 0x66, 0x99, 0xf1,
		0xfd, 0xce, 0xd4, 0x5d, 0xc5, 0x2d, 0x4a, 0x7e, 0x1e, 0x0a, 0x92, 0xbc, 0x6d, 0x39, 0x44, 0xb7,
		0x1b, 0x96, 0x71, 0x95, 0xd4, 0x06, 0xa0, 0xfe, 0x51, 0x97, 0xab, 0x36, 0x03, 0x70, 0xca, 0xbc,
		0x0c, 0x8a, 0xdf, 0x6f, 0x68, 0x46, 0xb3, 0x65, 0x3b, 0x5e, 0x04, 0xe3, 0x8f, 0xa5, 0xa7, 0x7c,
		0xdc, 0x32, 0x83, 0x15, 0xcb, 0x90, 0x67, 0xc3, 0x41, 0x43, 0xf2, 0x27, 0x82, 0x68, 0xa4, 0x83,
		0x12, 0x89, 0x43, 0xb7, 0x9b, 0x2d, 0xec, 0x0c, 0x92, 0xff, 0x7e, 0x2a, 0x13, 0x87, 0x80, 0xf0,
		0xe8, 0x1b, 0xed, 0xaa, 0xc4, 0x28, 0xea, 0xe3, 0x75, 0xe1, 0xe9, 0xeb, 0xe2, 0xcc, 0x86, 0x0b,
		0x71, 0x71, 0x85, 0x9a, 0x27, 0x5c, 0x2e, 0xa3, 0xc9, 0x9e, 0xb9, 0xee, 0x5b, 0x28, 0x54, 0x2d,
		0x8b, 0x67, 0x61, 0x24, 0x54, 0x2a, 0xa3, 0xa9, 0xfe, 0x57, 0x50, 0xe5, 0x82, 0x95, 0xb2, 0x78,
		0x1c, 0x92, 0xb4, 0xec, 0x45, 0xc3, 0xff, 0x4f, 0xc0, 0x99, 0x7a, 0xf1, 0x61, 0x48, 0xcb, 0x72,
		0x17, 0x0d, 0xfd, 0x7f, 0x01, 0xf5, 0x21, 0x14, 0x2e, 0x4b, 0x5d, 0x34, 0xfc, 0x73, 0x12, 0x2e,
		0x21, 0x14, 0x3e, 0xb8, 0x09, 0x7f, 0xf1, 0x5c, 0x52, 0xa4, 0x2b, 0x69, 0xbb, 0xd3, 0x30, 0x2c,
		0x6a, 0x5c, 0x34, 0xfa, 0x59, 0xf1, 0x70, 0x89, 0x28, 0x3e, 0x04, 0xa9, 0x01, 0x0d, 0xfe, 0x79,
		0x01, 0xe5, 0xfa, 0xc5, 0x05, 0xc8, 0x06, 0xea, 0x5a, 0x34, 0xfc, 0x0b, 0x02, 0x1e, 0x44, 0xd1,
		0xa5, 0x8b, 0xba, 0x16, 0x4d, 0xf0, 0x45, 0xb9, 0x74, 0x81, 0xa0, 0x66, 0x93, 0x25, 0x2d, 0x1a,
		0xfd, 0x25, 0x69, 0x75, 0x09, 0x29, 0x9e, 0x81, 0x8c, 0x9f, 0xa6, 0xa2, 0xf1, 0x5f, 0x16, 0xf8,
		0x0e, 0x86, 0x5a, 0x20, 0x90, 0x26, 0xa3, 0x29, 0xbe, 0x22, 0x2d, 0x10, 0x40, 0xd1, 0x63, 0xd4,
		0x5d, 0xfa, 0xa2, 0x99, 0xbe, 0x2a, 0x8f, 0x51, 0x57, 0xe5, 0xa3, 0xde, 0x64, 0xd9, 0x22, 0x9a,
		0xe2, 0x6b, 0xd2, 0x9b, 0x4c, 0x9f, 0x2e, 0xa3, 0xbb, 0x96, 0x44, 0x73, 0x7c, 0x5d, 0x2e, 0xa3,
		0xab, 0x94, 0x14, 0x2b, 0x80, 0x7a, 0xeb, 0x48, 0x34, 0xdf, 0xf3, 0x82, 0x6f, 0xac, 0xa7, 0x8c,
		0x14, 0x1f, 0x87, 0xc9, 0xfe, 0x35, 0x24, 0x9a, 0xf5, 0x85, 0xeb, 0x5d, 0x5d, 0x7f, 0xb0, 0x84,
		0x14, 0x37, 0x3a, 0x5d, 0x7f, 0xb0, 0x7e, 0x44, 0xd3, 0xbe, 0x78, 0x3d, 0xfc, 0x62, 0x17, 0x2c,
		0x1f, 0xc5, 0x12, 0x40, 0x27, 0x75, 0x47, 0x73, 0xbd, 0x2c, 0xb8, 0x02, 0x20, 0x7a, 0x34, 0x44,
		0xe6, 0x8e, 0xc6, 0xbf, 0x22, 0x8f, 0x86, 0x40, 0x14, 0x4f, 0x43, 0xda, 0x6a, 0x9b, 0x26, 0x0d,
		0x0e, 0x74, 0xf3, 0x7f, 0x08, 0x29, 0xfc, 0xfe, 0x86, 0x38, 0x18, 0x12, 0x50, 0x3c, 0x0e, 0x29,
		0xd2, 0xdc, 0x22, 0xb5, 0x28, 0xe4, 0x1f, 0x6e, 0xc8, 0x84, 0x40, 0xb5, 0x8b, 0x67, 0x00, 0xf8,
		0x4b, 0x23, 0xfb, 0x1e, 0x10, 0x81, 0xfd, 0xe3, 0x0d, 0xf1, 0xad, 0xb9, 0x03, 0xe9, 0x10, 0xf0,
		0x2f, 0xd7, 0x37, 0x27, 0xf8, 0x30, 0x4c, 0xc0, 0x5e, 0x34, 0x4f, 0xc1, 0xf0, 0x05, 0xd7, 0xb6,
		0x3c, 0xdc, 0x88, 0x42, 0xff, 0x49, 0xa0, 0xa5, 0x3e, 0x35, 0x58, 0xd3, 0x76, 0x88, 0x87, 0x1b,
		0x6e, 0x14, 0xf6, 0xcf, 0x02, 0xeb, 0x03, 0x28, 0x58, 0xc7, 0xae, 0x37, 0xc8, 0xbe, 0xff, 0x22,
		0xc1, 0x12, 0x40, 0x17, 0x4d, 0x7f, 0x5f, 0x24, 0x3b, 0x51, 0xd8, 0x8f, 0xe4, 0xa2, 0x85, 0x7e,
		0xf1, 0x61, 0xc8, 0xd0, 0x9f, 0xfc, 0xff, 0x2f, 0x22, 0xc0, 0x7f, 0x15, 0xe0, 0x0e, 0x82, 0x3e,
		0xd9, 0xf5, 0x6a, 0x9e, 0x11, 0x6d, 0xec, 0xbf, 0x09, 0x4f, 0x4b, 0xfd, 0x62, 0x09, 0xb2, 0xae,
		0x57, 0xab, 0xb5, 0x1d, 0x7e, 0x11, 0x15, 0x01, 0xff, 0xfb, 0x0d, 0xff, 0x65, 0xce, 0xc7, 0xcc,
		0x1f, 0xea, 0x7f, 0xb7, 0x04, 0x4b, 0xf6, 0x92, 0xcd, 0x6f, 0x95, 0xe0, 0xed, 0x18, 0x8c, 0xb8,
		0x8e, 0xee, 0x39, 0x44, 0x28, 0xa0, 0x14, 0xcd, 0xfd, 0xee, 0xd4, 0xde, 0xee, 0x8d, 0x66, 0x9e,
		0x82, 0xe1, 0xaa, 0xa3, 0x6f, 0x38, 0x84, 0xa0, 0x69, 0xc8, 0x8a, 0xef, 0xd4, 0x6b, 0x9d, 0x7f,
		0x95, 0x08, 0x8a, 0xd0, 0x2c, 0x0c, 0xf3, 0xae, 0xcd, 0x15, 0x37, 0xcf, 0xf9, 0x39, 0xf6, 0xd0,
		0x39, 0x41, 0xa1, 0xca, 0xe9, 0x62, 0xf2, 0xa3, 0xd7, 0x0f, 0xc6, 0xe6, 0xd3, 0x1f, 0xbd, 0x7f,
		0x20, 0xf6, 0xcf, 0xf7, 0x0f, 0xc4, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x73, 0x9d, 0x64, 0x46,
		0xd5, 0x2c, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *SrcTree) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tests.SrcTree{")
	if this.PackageName != nil {
		s = append(s, "PackageName: "+valueToGoStringSrctree(this.PackageName, "string")+",\n")
	}
	if this.Imports != nil {
		s = append(s, "Imports: "+fmt.Sprintf("%#v", this.Imports)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSrctree(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSrctree(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func NewPopulatedSrcTree(r randySrctree, easy bool) *SrcTree {
	this := &SrcTree{}
	if r.Intn(10) != 0 {
		v1 := string(randStringSrctree(r))
		this.PackageName = &v1
	}
	if r.Intn(10) == 0 {
		v2 := r.Intn(5)
		this.Imports = make([]*SrcTree, v2)
		for i := 0; i < v2; i++ {
			this.Imports[i] = NewPopulatedSrcTree(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSrctree(r, 3)
	}
	return this
}

type randySrctree interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSrctree(r randySrctree) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSrctree(r randySrctree) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneSrctree(r)
	}
	return string(tmps)
}
func randUnrecognizedSrctree(r randySrctree, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSrctree(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSrctree(dAtA []byte, r randySrctree, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSrctree(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateSrctree(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateSrctree(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSrctree(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSrctree(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSrctree(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSrctree(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}

func init() { proto.RegisterFile("srctree.proto", fileDescriptorSrctree) }

var fileDescriptorSrctree = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2e, 0x4a, 0x2e,
	0x29, 0x4a, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0x49, 0x2d, 0x2e, 0x29,
	0x96, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f,
	0xcf, 0xd7, 0x07, 0xcb, 0x26, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0xd1, 0xa5, 0x14,
	0xcd, 0xc5, 0x1e, 0x5c, 0x94, 0x1c, 0x52, 0x94, 0x9a, 0x2a, 0xa4, 0xc0, 0xc5, 0x1d, 0x90, 0x98,
	0x9c, 0x9d, 0x98, 0x9e, 0xea, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x84,
	0x2c, 0x24, 0xa4, 0xc1, 0xc5, 0xee, 0x99, 0x5b, 0x90, 0x5f, 0x54, 0x52, 0x2c, 0xc1, 0xa4, 0xc0,
	0xac, 0xc1, 0x6d, 0xc4, 0xa7, 0x07, 0xb6, 0x54, 0x0f, 0x6a, 0x44, 0x10, 0x4c, 0xda, 0x8a, 0xe5,
	0xc3, 0x02, 0x79, 0x46, 0x27, 0x8e, 0x0f, 0x0f, 0xe5, 0x18, 0x7f, 0x3c, 0x94, 0x63, 0x04, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x00, 0xbc, 0x1e, 0x59, 0xac, 0x00, 0x00, 0x00,
}
